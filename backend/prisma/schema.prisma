// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String              @id @default(uuid())
  name              String
  email             String              @unique
  age               Int
  mobile_no         String
  address           String
  password          String
  photo             String?
  blood_group        String

  healthRecords     HealthRecord[]
  emergencies       Emergency[]
  labs              Lab[]
  medicineReminders MedicineReminder[]
  appointments      Appointment[]
  ambulances        Ambulance[]

}

enum Type {
  PRESCRIPTION
  LAB
  IMAGING
  VACCINATION
}

model HealthRecord {
  id       String   @id @default(uuid())
  name     String
  date     DateTime 
  url      String
  type     Type     @default(PRESCRIPTION)
  userId   String
  user     User     @relation(fields: [userId], references: [id])
  updatedAt DateTime @updatedAt
}

model Emergency {
  id        String     @id @default(uuid())
  name      String
  mobileNo  String
  relation  String
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  ambulance Ambulance?
}

model Ambulance {
  id          String     @id @default(uuid())
  location    String
  total       Int
  phone       String
  active      Boolean
  fee         Int

  userId      String
  user        User       @relation(fields: [userId], references: [id])

  emergencyId String     @unique
  emergency   Emergency  @relation(fields: [emergencyId], references: [id])
}

enum Mode {
  VIDEO
  CHAT
  INPLACE
}

enum Status {
  SCHEDULED
  COMPLETED
  CANCELLED
}

model Appointment {
  id        String    @id @default(uuid())
  date      DateTime
  mode      Mode
  status    Status    @default(SCHEDULED)

  userId    String
  user      User      @relation(fields: [userId], references: [id])

  doctorId  String
  doctor    Doctor    @relation(fields: [doctorId], references: [id])
}

model Doctor {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  age          Int
  mobileNo     String
  address      String
  photo        String?
  rating       Int
  active       Boolean
  languages    String[]      
  fee          Int

  specialities Speciality[]
  appointments Appointment[]
}

model Speciality {
  id          String  @id @default(uuid())
  name        String
  description String
  experience  Int
  certificate String

  doctorId    String
  doctor      Doctor @relation(fields: [doctorId], references: [id])
}

model Lab {
  id      String   @id @default(uuid())
  name    String
  fee     Int
  address String
  type    String
  date    DateTime

  userId  String
  user    User     @relation(fields: [userId], references: [id])
}

model Hospital {
  id              String   @id @default(uuid())
  name            String
  description     String
  address         String
  photo           String?
  phone           Int
  rating          Int
  email           String
  establishedDate DateTime
}

enum Repeat {
  ONCE
  DAILY
  WEEKLY
}

model MedicineReminder {
  id         String   @id @default(uuid())
  name       String
  dosage     String
  frequency  String
  startDate  DateTime
  times      String[]
  isActive   Boolean @default(true)
  repeat     Repeat
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  updatedAt  DateTime @updatedAt
}

model Message {
  id         String   @id @default(uuid())
  content    String
  createdAt  DateTime @default(now())

  senderId   String
  receiverId String

}
